"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[270],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>k});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),u=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=u(a),k=n,d=m["".concat(s,".").concat(k)]||m[k]||p[k]||l;return a?r.createElement(d,o(o({ref:t},c),{},{components:a})):r.createElement(d,o({ref:t},c))}));function k(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var u=2;u<l;u++)o[u]=a[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},1511:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var r=a(7462),n=(a(7294),a(3905));const l={},o="Releasing",i={unversionedId:"releasing",id:"releasing",title:"Releasing",description:"Objective: Setup a release pipeline and produce our first release.",source:"@site/docs/9-releasing.md",sourceDirName:".",slug:"/releasing",permalink:"/kubecon-na-2022-tutorial/docs/releasing",draft:!1,editUrl:"https://github.com/capi-samples/kubecon-na-2022-tutorial/docs/9-releasing.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Testing",permalink:"/kubecon-na-2022-tutorial/docs/testing"},next:{title:"Adding webhooks",permalink:"/kubecon-na-2022-tutorial/docs/webhooks"}},s={},u=[{value:"Background",id:"background",level:2},{value:"Create metadata.yaml",id:"create-metadatayaml",level:2},{value:"Update the container build",id:"update-the-container-build",level:2},{value:"Create release GitHub Action",id:"create-release-github-action",level:2},{value:"Create out first release",id:"create-out-first-release",level:2},{value:"Testing our new release",id:"testing-our-new-release",level:2}],c={toc:u};function p(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"releasing"},"Releasing"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Objective:")," Setup a release pipeline and produce our first release."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#releasing"},"Releasing"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#background"},"Background")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#create-metadatayaml"},"Create metadata.yaml")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#update-the-container-build"},"Update the container build")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#create-release-github-action"},"Create release GitHub Action")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#create-out-first-release"},"Create out first release")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#testing-our-new-release"},"Testing our new release"))))),(0,n.kt)("h2",{id:"background"},"Background"),(0,n.kt)("p",null,"For your provider to be installable using ",(0,n.kt)("strong",{parentName:"p"},"clusterctl")," there are a number of requirements as a provider author that you must be aware of."),(0,n.kt)("p",null,"Firstly, you must create a file that clusterctl can use to know which version of your provider is compatible with which API API versions. This file is called ",(0,n.kt)("strong",{parentName:"p"},"metadata.yaml")," and lives in your repo."),(0,n.kt)("p",null,"Secondly, your provider must be built into a container image that is available via a registry. This is normally a public registry (such as Docker Hub or GitHub Container Registry) but it is also possible to use a private registry."),(0,n.kt)("p",null,"Lastly, for each new version of your provider you will create a GitHub release. The name of the release will be the version number of your provider."),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"You must use semver for versioning.")),(0,n.kt)("p",null,"Each GitHup release is expected to have certain artefacts attached to it:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"metadata.yaml")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"infrastructure-components.yaml")," - this is all the k8s artefacts required to install your provider"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"cluster-template*.yaml")," - these are the cluster templates that users will be able to use with ",(0,n.kt)("inlineCode",{parentName:"li"},"clusterctl generate cluster"))),(0,n.kt)("h2",{id:"create-metadatayaml"},"Create metadata.yaml"),(0,n.kt)("p",null,"In this tutorial we will start our releases from ",(0,n.kt)("strong",{parentName:"p"},"0.1.0"),"."),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Create a new file in the root of your repo called ",(0,n.kt)("strong",{parentName:"li"},"metadata.yaml")),(0,n.kt)("li",{parentName:"ol"},"Add the following contents to the new files:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"# maps release series of major.minor to cluster-api contract version\n# the contract version may change between minor or major versions, but *not*\n# between patch versions.\n#\n# update this file only when a new major or minor version is released\napiVersion: clusterctl.cluster.x-k8s.io/v1alpha3\nreleaseSeries:\n  - major: 0\n    minor: 1\n    contract: v1beta1\n")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"This is mapping the 0.1.x release series to the v1beta1 api contract of capi. You will need to update this file when you change the major or minor version number AND when there is a new version of CAPI API contract that your provider supports.")),(0,n.kt)("h2",{id:"update-the-container-build"},"Update the container build"),(0,n.kt)("p",null,"The generated ",(0,n.kt)("strong",{parentName:"p"},"Dockerfile")," from the skaffolding stage uses Docker ",(0,n.kt)("a",{parentName:"p",href:"https://docs.docker.com/build/building/multi-stage/"},"multi-stage builds"),"."),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Edit ",(0,n.kt)("strong",{parentName:"li"},"Dockerfile"),":",(0,n.kt)("ol",{parentName:"li"},(0,n.kt)("li",{parentName:"ol"},"change ",(0,n.kt)("inlineCode",{parentName:"li"},"FROM golang:1.18 as builder")," to ",(0,n.kt)("inlineCode",{parentName:"li"},"FROM golang:1.19 as builder")),(0,n.kt)("li",{parentName:"ol"},"add ",(0,n.kt)("inlineCode",{parentName:"li"},"COPY pkg/ pkg/")," to the source code copying"),(0,n.kt)("li",{parentName:"ol"},"In the second stage (i.e. after ",(0,n.kt)("inlineCode",{parentName:"li"},"FROM gcr.io/distroless/static:nonroot"),") add a label to associate the images with your repo: ",(0,n.kt)("inlineCode",{parentName:"li"},"LABEL org.opencontainers.image.source=https://github.com/capi-samples/cluster-api-provider-docker")," (",(0,n.kt)("strong",{parentName:"li"},"Change the owner of the repo to your name"),")"))),(0,n.kt)("li",{parentName:"ol"},"Edit ",(0,n.kt)("strong",{parentName:"li"},"Makefile")," change and  ",(0,n.kt)("inlineCode",{parentName:"li"},"IMG ?= controller:latest")," to:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-make"},"TAG ?= dev\nREGISTRY ?= ghcr.io\nORG ?= capi-samples\nCONTROLLER_IMAGE_NAME := cluster-api-provider-docker\nIMG ?= $(REGISTRY)/$(ORG)/$(CONTROLLER_IMAGE_NAME):$(TAG)\n")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Make sure you update the value of ",(0,n.kt)("strong",{parentName:"p"},"ORG")," to be your user name")),(0,n.kt)("ol",{start:3},(0,n.kt)("li",{parentName:"ol"},"Test your changes by opening a terminal in your providers directory and running:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"make docker-build\n")),(0,n.kt)("ol",{start:4},(0,n.kt)("li",{parentName:"ol"},"You should see output similar to this:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"Successfully built 6001e93da9c0\nSuccessfully tagged ghcr.io/capi-samples/cluster-api-provider-docker:dev\n")),(0,n.kt)("h2",{id:"create-release-github-action"},"Create release GitHub Action"),(0,n.kt)("p",null,"We will be using GitHub Actions and GitHub Container Registry to create our releases. But the steps could easily be done in any tool and registry of your choice."),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Create the ",(0,n.kt)("inlineCode",{parentName:"li"},".github/workflows")," folders in your repo"),(0,n.kt)("li",{parentName:"ol"},"Create a new file called ",(0,n.kt)("strong",{parentName:"li"},"release.yml")," in the new ",(0,n.kt)("strong",{parentName:"li"},"workflows")," folder"),(0,n.kt)("li",{parentName:"ol"},"Unless specified the remainder of the steps are ",(0,n.kt)("strong",{parentName:"li"},"additions")," to ",(0,n.kt)("strong",{parentName:"li"},"release.yml")),(0,n.kt)("li",{parentName:"ol"},"Start by naming the workflow:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"name: release\n")),(0,n.kt)("ol",{start:5},(0,n.kt)("li",{parentName:"ol"},"Next we define that we want the workflow to run when we push a new tag that follows sematic versioning:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},'on:\n  push:\n    tags:\n    - "v*.*.*"\n')),(0,n.kt)("ol",{start:6},(0,n.kt)("li",{parentName:"ol"},"For convenience we will define a couple of environment variables that we can use later on in the job & steps definitions:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"env:\n  TAG: ${{ github.ref_name }}\n  REGISTRY: ghcr.io\n")),(0,n.kt)("ol",{start:7},(0,n.kt)("li",{parentName:"ol"},"Define the release job which will run on ",(0,n.kt)("strong",{parentName:"li"},"ubuntu")," and require ",(0,n.kt)("strong",{parentName:"li"},"write")," access to to GitHub packages (to publish container images) and write access to the repo (to create releases):")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"jobs:\n  release:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n      packages: write\n    steps:\n")),(0,n.kt)("ol",{start:8},(0,n.kt)("li",{parentName:"ol"},"Next add a step to get the source for our provider:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"    - name: Checkout\n      uses: actions/checkout@v2\n      with:\n        fetch-depth: 0\n")),(0,n.kt)("ol",{start:9},(0,n.kt)("li",{parentName:"ol"},"Next we will build the container image for our provider and push it to the GitHub container registry:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"    - name: Docker login\n      uses: docker/login-action@v1\n      with:\n        registry: ${{ env.REGISTRY }}\n        username: ${{ github.actor }}\n        password: ${{ secrets.GITHUB_TOKEN }}\n    - name: Build docker image\n      run: make docker-build TAG=${{ env.TAG }}\n    - name: Push docker image\n      run: make docker-push TAG=${{ env.TAG }}\n")),(0,n.kt)("ol",{start:10},(0,n.kt)("li",{parentName:"ol"},"Now we need to create the ",(0,n.kt)("strong",{parentName:"li"},"infrastructure-components.yaml")," file so that we can later attach it to the release:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},'    - name: Update manifests\n      run: |\n        # this can be done via other means if required\n        kustomize build config/default/ > infrastructure-components.yaml\n        sed -i "s/cluster-api-provider-docker:dev/cluster-api-provider-docker:${TAG}/g" infrastructure-components.yaml\n')),(0,n.kt)("ol",{start:11},(0,n.kt)("li",{parentName:"ol"},"Create a new GitHub release using the tag as the name and attaching the required files mentioned in the ",(0,n.kt)("a",{parentName:"li",href:"#background"},"Background")," section:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"    - name: GitHub Release\n      uses: softprops/action-gh-release@v1\n      with:\n        prerelease: false\n        draft: true\n        fail_on_unmatched_files: true\n        generate_release_notes: true\n        discussion_category_name: Announcements\n        name: ${{ env.TAG }}\n        files: |\n          templates/cluster-template.yaml\n          metadata.yaml\n          infrastructure-components.yaml\n")),(0,n.kt)("ol",{start:12},(0,n.kt)("li",{parentName:"ol"},"Commit and push the changes to your repo")),(0,n.kt)("h2",{id:"create-out-first-release"},"Create out first release"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"If you bumping the MAJOR or MINOR version number you will need to change ",(0,n.kt)("strong",{parentName:"p"},"metadata.yaml")," first and commit this to your repo.")),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Open a terminal and go to your providers directory"),(0,n.kt)("li",{parentName:"ol"},"Checkout main, get latest and pull tags:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"git checkout main\ngit pull --tags\n")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"You can get the last version using ",(0,n.kt)("inlineCode",{parentName:"p"},"git describe --tags --abbrev=0"))),(0,n.kt)("ol",{start:3},(0,n.kt)("li",{parentName:"ol"},"Create a variable with your release version and tag:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},'RELEASE_VERSION=v0.1.0\ngit tag -s "${RELEASE_VERSION}" -m "${RELEASE_VERSION}"\n')),(0,n.kt)("ol",{start:4},(0,n.kt)("li",{parentName:"ol"},"Push the new tag:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},'git push origin "${RELEASE_VERSION}"\n')),(0,n.kt)("ol",{start:5},(0,n.kt)("li",{parentName:"ol"},"Go to your repo in the browser and watch the ",(0,n.kt)("strong",{parentName:"li"},"release")," action. One it completes successfully continue on."),(0,n.kt)("li",{parentName:"ol"},"Go to the new ",(0,n.kt)("strong",{parentName:"li"},"v0.1.0")," and check that the assets have been attached and the release notes are ok."),(0,n.kt)("li",{parentName:"ol"},"Edit the release and then click ",(0,n.kt)("strong",{parentName:"li"},"Publish Release")),(0,n.kt)("li",{parentName:"ol"},"Go to the root of your repo and click on the ",(0,n.kt)("strong",{parentName:"li"},"cluster-api-provider-docker")," package")),(0,n.kt)("ol",{start:9},(0,n.kt)("li",{parentName:"ol"},"By default the package will be public. We will make it public:",(0,n.kt)("ol",{parentName:"li"},(0,n.kt)("li",{parentName:"ol"},"Click ",(0,n.kt)("strong",{parentName:"li"},"Package settings")),(0,n.kt)("li",{parentName:"ol"},"Scroll down to the ",(0,n.kt)("strong",{parentName:"li"},"Danger Zone")," and click on ",(0,n.kt)("strong",{parentName:"li"},"Change visibility")),(0,n.kt)("li",{parentName:"ol"},"Click public, enter the repo and confirm the changes ")))),(0,n.kt)("h2",{id:"testing-our-new-release"},"Testing our new release"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Open a new terminal window"),(0,n.kt)("li",{parentName:"ol"},"Tell clusterctl about our provider via the use of a local config file:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},'RELEASE_VERSION=v0.1.0\n\nmkdir -p ~/.cluster-api\n\ncat << EOF >>~/.cluster-api/clusterctl.yaml\nproviders:\n  - name: "docker-kubecon"\n    url: "https://github.com/capi-samples/cluster-api-provider-docker/releases/$RELEASE_VERSION/infrastructure-components.yaml"\n    type: "InfrastructureProvider"\nEOF\n')),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Change the value of ",(0,n.kt)("strong",{parentName:"p"},"RELEASE_VERSION")," if needed and also make sure you use your GitHun name instead of ",(0,n.kt)("strong",{parentName:"p"},"capi-samples"))),(0,n.kt)("ol",{start:3},(0,n.kt)("li",{parentName:"ol"},"Open a terminal and create a new cluster in kind:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"cat > kind-cluster-with-extramounts.yaml <<EOF\nkind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nname: capi-test\nnodes:\n- role: control-plane\n  extraMounts:\n    - hostPath: /var/run/docker.sock\n      containerPath: /var/run/docker.sock\nEOF\n\nkind create cluster --config kind-cluster-with-extramounts.yaml\n")),(0,n.kt)("ol",{start:4},(0,n.kt)("li",{parentName:"ol"},"Create a managemnt cluster with our provider:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"clusterctl init --infrastructure docker-kubecon\n")),(0,n.kt)("ol",{start:5},(0,n.kt)("li",{parentName:"ol"},"Use kubectl or k9s to see that your provider is installed"),(0,n.kt)("li",{parentName:"ol"},"Create a new cluster using the template:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"export KUBERNETES_VERSION=v1.22.0\nexport CLUSTER_NAME=kubecontest\nexport CONTROL_PLANE_MACHINE_COUNT=1\nexport WORKER_MACHINE_COUNT=1\n\nclusterctl generate cluster -i docker-kubecon:$RELEASE_VERSION  $CLUSTER_NAME > cluster.yaml\n\nkubectl apply -f cluster.yaml\n")))}p.isMDXComponent=!0}}]);